<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Xposed快速入门</title>
      <link href="/2019/12/28/Xposed%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2019/12/28/Xposed%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="配置模块信息"><a href="#配置模块信息" class="headerlink" title="配置模块信息"></a>配置模块信息</h2><p>打开AndroidManifest.xml，在Application中添加3个meta-data标签。<br>xposedmodule代表这是一个Xposed模块。<br>xposeddescription代表模块说明，会显示在模块管理中。<br>xposedminversion代表支持的xposed的最低版本。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>de.robv.android.xposed.mods.tutorial<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>versionCode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>versionName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-sdk</span> <span class="token attr-name"><span class="token namespace">android:</span>minSdkVersion</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xposedmodule<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xposeddescription<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Easy example which makes the status bar clock red and adds a smiley<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xposedminversion<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>53<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在主工程(一般叫app)的build.gradle中添加以下代码</p><pre class=" language-Gradle"><code class="language-Gradle">dependencies {    ............    compileOnly 'de.robv.android.xposed:api:82'    compileOnly 'de.robv.android.xposed:api:82:sources'}</code></pre><p>然后同步一下,同步成功后，就可以在代码中使用Xposed的Api了。</p><h2 id="创建入口类"><a href="#创建入口类" class="headerlink" title="创建入口类"></a>创建入口类</h2><p>实现IXposedHookLoadPackage接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> de<span class="token punctuation">.</span>robv<span class="token punctuation">.</span>android<span class="token punctuation">.</span>xposed<span class="token punctuation">.</span>mods<span class="token punctuation">.</span>tutorial<span class="token punctuation">;</span><span class="token keyword">import</span> de<span class="token punctuation">.</span>robv<span class="token punctuation">.</span>android<span class="token punctuation">.</span>xposed<span class="token punctuation">.</span>IXposedHookLoadPackage<span class="token punctuation">;</span><span class="token keyword">import</span> de<span class="token punctuation">.</span>robv<span class="token punctuation">.</span>android<span class="token punctuation">.</span>xposed<span class="token punctuation">.</span>XposedBridge<span class="token punctuation">;</span><span class="token keyword">import</span> de<span class="token punctuation">.</span>robv<span class="token punctuation">.</span>android<span class="token punctuation">.</span>xposed<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>XC_LoadPackage<span class="token punctuation">.</span>LoadPackageParam<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tutorial</span> <span class="token keyword">implements</span> <span class="token class-name">IXposedHookLoadPackage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleLoadPackage</span><span class="token punctuation">(</span><span class="token keyword">final</span> LoadPackageParam lpparam<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//处理hook逻辑</span>        XposedBridge<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Loaded app: "</span> <span class="token operator">+</span> lpparam<span class="token punctuation">.</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用XposedHelpers.findAndHookMethod等方法hook</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="添加初始化文件"><a href="#添加初始化文件" class="headerlink" title="添加初始化文件"></a>添加初始化文件</h2><p>在assets目录下创建一个叫xposed_init的文本文件。如果没有assets目录先创建这个目录。<br>内容为入口类的全路径</p><pre class=" language-java"><code class="language-java">de<span class="token punctuation">.</span>robv<span class="token punctuation">.</span>android<span class="token punctuation">.</span>xposed<span class="token punctuation">.</span>mods<span class="token punctuation">.</span>tutorial<span class="token punctuation">.</span>Tutorial</code></pre><p>大功造成，运行项目，会在Xposed模块管理中看到我们的app。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Xposed Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang面试整理</title>
      <link href="/2019/10/31/Golang%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
      <url>/2019/10/31/Golang%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h2><ul><li>内存模型</li><li>goroutine调度原理</li><li>defer原理</li><li>channel原理</li></ul><h2 id="Web相关"><a href="#Web相关" class="headerlink" title="Web相关"></a>Web相关</h2><ul><li>常用web框架：Gin，beego</li><li><p>Restful API</p><p><a href="https://studygolang.com/articles/10541" target="_blank" rel="noopener">RESTful API 设计与工程实践</a></p></li></ul><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><ul><li>教程(<a href="https://segmentfault.com/a/1190000015135650" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015135650</a>)</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>MySQL索引原理</li><li>NoSQL</li><li>Mongodb</li><li>Redis的数据结构</li></ul><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul><li>搭建Gitlab-ci</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android无障碍服务</title>
      <link href="/2019/09/09/android%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/09/09/android%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MyAccessibilityService <span class="token operator">:</span> <span class="token function">AccessibilityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//服务被系统中断时调用</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAccessibilityEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> AccessibilityEvent<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//处理事件，在这里获取view树</span>        AccessibilityNodeInfo nodeInfo <span class="token operator">=</span> evet<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行点击</span>        <span class="token comment" spellcheck="true">//nodeInfo.performAction();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Manifest中声明Service"><a href="#Manifest中声明Service" class="headerlink" title="Manifest中声明Service"></a>Manifest中声明Service</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.service.MyAccessibilityService<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/my_accessibility_service_label<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>permission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BIND_ACCESSIBILITY_SERVICE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.accessibilityservice.AccessibilityService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><h2 id="配置服务信息"><a href="#配置服务信息" class="headerlink" title="配置服务信息"></a>配置服务信息</h2><h3 id="创建配置信息"><a href="#创建配置信息" class="headerlink" title="创建配置信息"></a>创建配置信息</h3><p>在res/xml/目录中，创建accessibility_service_config.xml<br>packageNames-代表服务在哪些app上生效。可以指定多个包名，用逗号分开. 在哪个app上起作用，如果忽略则对全部app生效.</p><p>android:canPerformGestures-是否能模拟触摸事件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>accessibility_service</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/my_accessibility_service_desc<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>packageNames</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.ado.myapplication<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>accessibilityEventTypes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAllMask<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>accessibilityFlags</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flagDefault<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>accessibilityFeedbackType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>feedbackSpoken<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>notificationTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>canRetrieveWindowContent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>accessibility_service</span><span class="token punctuation">></span></span></code></pre><h3 id="引用配置信息"><a href="#引用配置信息" class="headerlink" title="引用配置信息"></a>引用配置信息</h3><p>在service中添加meta-data标签,引用配置信息</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span>    <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.service.MyAccessibilityService<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/my_accessibility_service_label<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>permission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.BIND_ACCESSIBILITY_SERVICE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.accessibilityservice.AccessibilityService<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 添加配置信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accessibility_service_config<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@xml/accessibility_service_config<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span></code></pre><p>## </p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluttet修改App名称</title>
      <link href="/2019/07/03/Fluttet%E4%BF%AE%E6%94%B9App%E5%90%8D%E7%A7%B0/"/>
      <url>/2019/07/03/Fluttet%E4%BF%AE%E6%94%B9App%E5%90%8D%E7%A7%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>打开android/app/src/main中的AndroidManifest.xml<br>android:label的值就是app的名称。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>io.flutter.app.FlutterApplication<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app名称<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        .......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span></code></pre><h3 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h3><p>打开ios/Runner/Info.plist.<br>找到CFBundleName，下面的String就是app名称</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>app名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决android官方模拟器无法上网</title>
      <link href="/2019/07/03/%E8%A7%A3%E5%86%B3android%E5%AE%98%E6%96%B9%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/"/>
      <url>/2019/07/03/%E8%A7%A3%E5%86%B3android%E5%AE%98%E6%96%B9%E6%A8%A1%E6%8B%9F%E5%99%A8%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>本来模拟器能正常上网，更新AndroidStudio和模拟器版本后，发现无法上网。</p><p>经查是由于DNS的问题。</p><p>将电脑的DNS改为Google的8.8.8.8.</p><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><p>系统偏好设置–网络–高级–DNS<br>点击加号，增加8.8.8.8,保存，应用。<br>关闭模拟器，再重新打开就能正常上网了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加Flutter模块到已有项目(Android)</title>
      <link href="/2019/06/10/%E6%B7%BB%E5%8A%A0Flutter%E6%A8%A1%E5%9D%97%E5%88%B0%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/06/10/%E6%B7%BB%E5%8A%A0Flutter%E6%A8%A1%E5%9D%97%E5%88%B0%E5%B7%B2%E6%9C%89%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="创建Flutter模块"><a href="#创建Flutter模块" class="headerlink" title="创建Flutter模块"></a>创建Flutter模块</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#进入指定目录</span>$ <span class="token function">cd</span> <span class="token comment" spellcheck="true">#使用命令创建flutter模块,flutter_module是模块名</span>$ flutter create -t module flutter_module</code></pre><h3 id="主工程配置"><a href="#主工程配置" class="headerlink" title="主工程配置"></a>主工程配置</h3><h4 id="app的build-gradle"><a href="#app的build-gradle" class="headerlink" title="app的build.gradle"></a>app的build.gradle</h4><pre><code>android{    ......    compileOptions {      sourceCompatibility 1.8      targetCompatibility 1.8    }    }dependencies {  implementation project(&#39;:flutter&#39;)}</code></pre><h4 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h4><pre><code>#原有的代码include &#39;:app&#39;#新增的代码                                     setBinding(new Binding([gradle: this]))                                evaluate(new File(                                                        settingsDir.parentFile,  #flutter模块路径                                                 &#39;my_flutter/.android/include_flutter.groovy&#39;                          ))                                                                      </code></pre><p>通过以上配置，sync后，在Android Studio目录结构中，就会多出一个flutter模块.</p><h3 id="编写Widget"><a href="#编写Widget" class="headerlink" title="编写Widget"></a>编写Widget</h3><p>使用window.defaultRouteName()获取当前Android传入的标识符.<br>在main.dart中编写以下代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token string">'dart:ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token function">_widgetForRoute</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>defaultRouteName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据不同的标识符，返回不同的Widget.</span>Widget <span class="token function">_widgetForRoute</span><span class="token punctuation">(</span>String route<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'route1'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">SomeWidget</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'route2'</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">SomeOtherWidget</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">Center</span><span class="token punctuation">(</span>        child<span class="token operator">:</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">'Unknown route: $route'</span><span class="token punctuation">,</span> textDirection<span class="token operator">:</span> TextDirection<span class="token punctuation">.</span>ltr<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Java代码获取Flutter的Widget"><a href="#Java代码获取Flutter的Widget" class="headerlink" title="Java代码获取Flutter的Widget"></a>Java代码获取Flutter的Widget</h3><p>使用Flutter.createView(Context,Lifecycle,string)获取widget.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取Flutter Widget</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//route1代表传入的标识符</span>        View flutterView <span class="token operator">=</span> Flutter<span class="token punctuation">.</span><span class="token function">createView</span><span class="token punctuation">(</span>            MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>            <span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"route1"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>引用：<a href="https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps" target="_blank" rel="noopener">https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter路由</title>
      <link href="/2019/05/27/Flutter%E8%B7%AF%E7%94%B1/"/>
      <url>/2019/05/27/Flutter%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h3><pre class=" language-java"><code class="language-java">Navigator<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">SomeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="路由名跳转"><a href="#路由名跳转" class="headerlink" title="路由名跳转"></a>路由名跳转</h3><h4 id="必须提前注册路由"><a href="#必须提前注册路由" class="headerlink" title="必须提前注册路由"></a>必须提前注册路由</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@override</span>  Widget <span class="token function">build</span><span class="token punctuation">(</span>BuildContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">MaterialApp</span><span class="token punctuation">(</span>      home<span class="token operator">:</span> <span class="token function">FirstScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      routes<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"注册的路由名"</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><pre class=" language-java"><code class="language-java">Navigator<span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"route name"</span><span class="token punctuation">,</span>arguments<span class="token operator">:</span> <span class="token string">"任意参数类型"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="跳转带参数"><a href="#跳转带参数" class="headerlink" title="跳转带参数"></a>跳转带参数</h3><pre class=" language-java"><code class="language-java">Navigator<span class="token punctuation">.</span><span class="token function">pushNamed</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string">"router name"</span><span class="token punctuation">,</span><span class="token string">"参数，可以是任意类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="跳转新页面，将上个页面移除栈"><a href="#跳转新页面，将上个页面移除栈" class="headerlink" title="跳转新页面，将上个页面移除栈"></a>跳转新页面，将上个页面移除栈</h3><pre class=" language-java"><code class="language-java">  Navigator<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pushReplacement</span><span class="token punctuation">(</span><span class="token function">MaterialPageRoute</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">HomeScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="跳转后关闭以前所有页面"><a href="#跳转后关闭以前所有页面" class="headerlink" title="跳转后关闭以前所有页面"></a>跳转后关闭以前所有页面</h3><pre class=" language-java"><code class="language-java">Navigator<span class="token punctuation">.</span><span class="token function">pushNamedAndRemoveUntil</span><span class="token punctuation">(</span>          context<span class="token punctuation">,</span> <span class="token string">"路由名，需要提前注册"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Route<span class="token operator">&lt;</span>dynamic<span class="token operator">></span> route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">"参数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：返回false才会关闭以前的页面</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter中查看Android包名和IOS的bundle id</title>
      <link href="/2019/05/24/Flutter%E4%B8%AD%E6%9F%A5%E7%9C%8BAndroid%E5%8C%85%E5%90%8D%E5%92%8CIOS%E7%9A%84bundle-id/"/>
      <url>/2019/05/24/Flutter%E4%B8%AD%E6%9F%A5%E7%9C%8BAndroid%E5%8C%85%E5%90%8D%E5%92%8CIOS%E7%9A%84bundle-id/</url>
      
        <content type="html"><![CDATA[<h3 id="Android包名"><a href="#Android包名" class="headerlink" title="Android包名"></a>Android包名</h3><p>打开android/app/main/AndroidManifest.xml<br>package后面的字符串就是包名.</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xxx.xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="IOS-bundle-id"><a href="#IOS-bundle-id" class="headerlink" title="IOS bundle id"></a>IOS bundle id</h3><p>打开ios/Runner.xcodeproj/project.pbxproj<br>搜索PRODUCT_BUNDLE_IDENTIFIER，后面的值就是bundle id.</p><pre><code>PRODUCT_BUNDLE_IDENTIFIER = com.beibeihua.beibeihua;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android面试题整理(持续更新)</title>
      <link href="/2019/04/26/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2019/04/26/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><ol><li>ArrayList实现原理(<a href="https://www.jianshu.com/p/e3e3f681e7b3" target="_blank" rel="noopener">https://www.jianshu.com/p/e3e3f681e7b3</a>)</li><li>HashMap实现原理</li><li>链表实现原理</li><li>值引用和引用传递的区别，在java中的应用</li><li>ClassLoader，类加载机制</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ol><li>stack,queue.<a href="https://www.jianshu.com/p/4b74dde349f4" target="_blank" rel="noopener">https://www.jianshu.com/p/4b74dde349f4</a></li></ol><h2 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h2><ol><li>阻塞队列和非阻塞队列</li><li>线程池</li><li>并发库</li></ol><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul><li>Handler、Looper、MessageQueue</li><li>View绘制流程</li><li>事件分发拦截</li><li>屏幕适配方案</li><li>性能优化(DDMS、traceview、MAT)</li><li>App启动流程，Activity启动流程</li><li>ANR分析(<a href="https://codezjx.com/2017/08/06/anr-trace-analytics/" target="_blank" rel="noopener">https://codezjx.com/2017/08/06/anr-trace-analytics/</a>)<br>  (adb pull /data/anr/traces.txt)</li><li>AMS PMS WMS源码解析</li><li>OkHttp原理</li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>工厂模式(抽象工厂和简单工厂的区别)</li><li>观察者模式</li><li>建造者模式</li></ul><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ul><li>类加载机制</li><li>GC算法</li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>排序<ul><li>冒泡排序</li><li>快速排序</li><li>选择排序</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 将View的内容转换为图片</title>
      <link href="/2019/03/25/Android-%E5%B0%86View%E7%9A%84%E5%86%85%E5%AE%B9%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87/"/>
      <url>/2019/03/25/Android-%E5%B0%86View%E7%9A%84%E5%86%85%E5%AE%B9%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要将app中某个控制的内容转换为图片保存起来。<br>以下代码可以实现。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * View转换为Bitmap图片     *     * @param view     * @return Bitmap     */</span>    <span class="token keyword">public</span> Bitmap <span class="token function">convertViewToBitmap</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建Bitmap,最后一个参数代表图片的质量.</span>        Bitmap bitmap <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> view<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bitmap<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>ARGB_8888<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建Canvas，并传入Bitmap.</span>        Canvas canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//View把内容绘制到canvas上，同时保存在bitmap.</span>        view<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改drawableLeft、Right、Bottom、Top图片的大小</title>
      <link href="/2019/03/25/%E6%9B%B4%E6%94%B9drawableLeft%E3%80%81Right%E3%80%81Bottom%E3%80%81Top%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%A7%E5%B0%8F/"/>
      <url>/2019/03/25/%E6%9B%B4%E6%94%B9drawableLeft%E3%80%81Right%E3%80%81Bottom%E3%80%81Top%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>默认情况下，在xml中为TextView设置drawableLeft、drawableRight、drawableTop、drawableBottom，图片的大小是根据图片的像素自动适配的。</p><p>有时候这样显示出来的效果跟UI设计师出的图不一致。<br>我们可以在代码中改变图片的大小。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取Drawable</span>Drawable drawable <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>garbage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//想改变高度就修改top或bottom,改变宽度就修改left或right.</span>drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置图片在文字的哪一侧,分别是左上右下</span>textView<span class="token punctuation">.</span><span class="token function">setCompoundDrawables</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> drawable<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile常用命令</title>
      <link href="/2019/03/14/Dockerfile%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/14/Dockerfile%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>一个最简单的go 项目的dockerfile</p><pre class=" language-bash"><code class="language-bash">FROM golang:latestMAINTAINER adoRUN go get github.com/astaxie/beego <span class="token operator">&amp;&amp;</span> go get github.com/beego/beeEXPOSE 8080CMD <span class="token punctuation">[</span><span class="token string">"bee"</span>,<span class="token string">"run"</span><span class="token punctuation">]</span></code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>FROM golang:latest<br>指定用哪个远程镜像来构建.FROM必须是Dockerfile的第一个命令。<br>一般都是开发语言的环境，比如java php python</p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>声明作者，就像开发中的@author一样，一般放在FROM后面。</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>用来执行命令行的命令。<br>如果项目中引入了三方库，必须先下载三方库。</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>暴露docker的指定端口，和外层通信</p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>可以让容器访问宿主机上的目录</p><pre><code>VOLUME [&quot;/home/project/&quot;]</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker CenOS安装教程</title>
      <link href="/2019/03/12/Docker-CenOS%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2019/03/12/Docker-CenOS%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>CentOS 7以上。</p><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>如果以前安装过docker，请先删除旧版本。</p><pre class=" language-shell"><code class="language-shell">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>Docker的安装方式有以下三种。</p><ol><li>添加Docker远程仓库，从仓库安装。（官方推荐）</li><li>RPM包安装，适合有经验的Linux用户。</li><li>脚本安装。适合测试环境和开发环境。</li></ol><h3 id="从仓库安装"><a href="#从仓库安装" class="headerlink" title="从仓库安装"></a>从仓库安装</h3><p>这里使用仓库安装，大部分用户都会使用这种安装方式。</p><ol><li>安装 yum-utils 工具包<pre class=" language-shell"><code class="language-shell">$ sudo yum install -y yum-utils \device-mapper-persistent-data \lvm2</code></pre></li><li><p>添加docker-ce的仓库地址</p><pre class=" language-shell"><code class="language-shell">$ sudo yum-config-manager \ --add-repo \https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>国内用户可以使用阿里云的docker镜像仓库：<a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></li><li><p>开始安装</p><pre class=" language-shell"><code class="language-shell">$ sudo yum install docker-ce</code></pre></li><li>启动docker服务<pre class=" language-shell"><code class="language-shell">$ sudo systemctl start docker</code></pre></li><li>运行测试Image，验证docker是否安装成功<pre class=" language-shell"><code class="language-shell">$ sudo docker run hello-world</code></pre>这条命令会下载一个测试Image,下载成功后会在容器内运行。运行后，会打印一些信息并退出，代表docker已经成功安装。</li></ol><p>参考：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2019/03/12/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/12/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>systemctl docker start</p><h2 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h2><p>搜索仓库的镜像<br>docker search 镜像名</p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>docker pull 镜像名</p><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><p>docker images</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>docker rmi 镜像id<br>注意：删除镜像前必须先删除容器才可以。</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>首先需要创建一个Dockerfile文件。然后运行<br>docker build -t image-name .<br>注意最后有一个”.”</p><h2 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h2><p>运行<br>docker run 参数  镜像名<br>示例：</p><pre class=" language-shell"><code class="language-shell">$ docker run -d --name demo nginx::lastest</code></pre><p>查看运行的容器<br>docker ps [可带参数]<br>-a: 显示所有容器。</p><p>停止容器<br>docker stop 容器id</p><p>删除容器<br>docker rm 容器id</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git合并分支,解决冲突</title>
      <link href="/2019/03/07/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF-%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/"/>
      <url>/2019/03/07/git%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF-%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>有2个分支。分支A，分支B。</p><ol><li>分支A合并到分支B<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#切换到分支B</span><span class="token function">git</span> checkout 分支B<span class="token comment" spellcheck="true">#合并分支A的代码</span><span class="token function">git</span> merge 分支A</code></pre></li><li>分支B合并到分支A<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#切换到分支B</span><span class="token function">git</span> checkout 分支A<span class="token comment" spellcheck="true">#合并分支A的代码</span><span class="token function">git</span> merge 分支B</code></pre></li></ol><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>合并分支时，常常会遇到冲突.</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> merge branchxxxAuto-merging 冲突的文件.xxxCONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> 冲突的文件.xxxAutomatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.</code></pre><p>这是因为2个分支中同时改动了同样的位置。</p><p>根据上面的冲突提示，可以看到是哪些文件的代码冲突了。</p><p>如果冲突的文件太多，我们也可以使用git status来查看有哪些冲突的文件.<br>both modified后面的文件名就代表冲突的文件.</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterYou have unmerged paths.  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">"git commit"</span><span class="token punctuation">)</span>Unmerged paths:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to mark resolution<span class="token punctuation">)</span>        both modified:      index.htmlno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span></code></pre><p>我们打开这些文件，会发现以下代码。</p><pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD&lt;div id=&quot;footer&quot;&gt;contact : email.support@github.com&lt;/div&gt;=======&lt;div id=&quot;footer&quot;&gt;  please contact us at support@github.com&lt;/div&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; branchB</code></pre><p>在&lt;&lt;&lt;&lt;&lt;&lt; HEAD和======之间的内容，代表的是当前分支的代码。<br>在====== 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; branchB之间的内容，代表的是要合并分支的代码。</p><p>可以根据需要决定需要保留的代码，最后删除&lt;&lt;&lt;&lt;&lt; ======= &gt;&gt;&gt;&gt;&gt;&gt;&gt;这些符号，保证代码正常运行。</p><p>解决完所有冲突后，使用git add 将冲突的文件标记为已解决状态。<br>然后用git commit 完成这次合并提交。<br>最后git push 提交到远程仓库就可以了。</p><p>参考：<a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6" target="_blank" rel="noopener">https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/2019/03/03/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/03/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>hexo官方文档对新人实在是太不友好了，需要自己记一记。</p><p>hexo的所有命令必须在hexo init的目录下才有效.</p><h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new post <span class="token string">"文章标题"</span></code></pre><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate<span class="token comment" spellcheck="true">#简写</span>$ hexo g</code></pre><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><h4 id="安装服务器模块"><a href="#安装服务器模块" class="headerlink" title="安装服务器模块"></a>安装服务器模块</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-server --save</code></pre><h4 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h4><pre class=" language-bash"><code class="language-bash">$ hexo server<span class="token comment" spellcheck="true">#简写</span>$ hexo s</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy<span class="token comment" spellcheck="true">#简写</span>$ hexo d</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang学习资料汇总</title>
      <link href="/2019/03/03/golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
      <url>/2019/03/03/golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>go第三方框架、库集合：<a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">https://github.com/avelino/awesome-go</a><br>websocket 处理百分并发：<a href="https://github.com/eranyanay/1m-go-websockets" target="_blank" rel="noopener">https://github.com/eranyanay/1m-go-websockets</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh remote host identification has changed</title>
      <link href="/2019/02/28/ssh-remote-host-identification-has-changed/"/>
      <url>/2019/02/28/ssh-remote-host-identification-has-changed/</url>
      
        <content type="html"><![CDATA[<p>通过SSH连接服务器时，出现以下提示。</p><pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the RSA key sent by the remote host isSHA256:uET4DUxKpJV0DOIYWOqqSpzFMru79AnUNkOvsnlp9/s.Please contact your system administrator.Add correct host key in /var/root/.ssh/known_hosts to get rid of this message.Offending RSA key in /var/root/.ssh/known_hosts:5RSA host key for 222.186.48.226 has changed and you have requested strict checking.Host key verification failed.</code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>服务器的私钥变了。需要在本机重新生成对应的公钥。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><pre><code>ssh-keygen -R 远程主机ip#示例： ssh-keygen -R 202.172.32.110</code></pre><p>重新连接服务器，会提示是否生成新的key.输入yes就可以了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装hexo常见问题</title>
      <link href="/2019/02/28/mac%E5%AE%89%E8%A3%85hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2019/02/28/mac%E5%AE%89%E8%A3%85hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>安装hexo出现如下错误</p><pre class=" language-bash"><code class="language-bash">dujuncandeMBP:lib ado$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli<span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli/node_modules<span class="token function">npm</span> ERR<span class="token operator">!</span> path /usr/local/lib/node_modules/hexo-cli<span class="token function">npm</span> ERR<span class="token operator">!</span> code EACCES<span class="token function">npm</span> ERR<span class="token operator">!</span> errno -13<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall access<span class="token function">npm</span> ERR<span class="token operator">!</span> Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>  <span class="token punctuation">{</span> <span class="token punctuation">[</span>Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token punctuation">]</span><span class="token function">npm</span> ERR<span class="token operator">!</span>   stack:<span class="token function">npm</span> ERR<span class="token operator">!</span>    <span class="token string">'Error: EACCES: permission denied, access \'/usr/local/lib/node_modules/hexo-cli\''</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   errno: -13,<span class="token function">npm</span> ERR<span class="token operator">!</span>   code: <span class="token string">'EACCES'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   syscall: <span class="token string">'access'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   path: <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span> <span class="token punctuation">}</span><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> The operation was rejected by your operating system.<span class="token function">npm</span> ERR<span class="token operator">!</span> It is likely you <span class="token keyword">do</span> not have the permissions to access this <span class="token function">file</span> as the current user<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> If you believe this might be a permissions issue, please double-check the<span class="token function">npm</span> ERR<span class="token operator">!</span> permissions of the <span class="token function">file</span> and its containing directories, or try running<span class="token function">npm</span> ERR<span class="token operator">!</span> the <span class="token function">command</span> again as root/Administrator <span class="token punctuation">(</span>though this is not recommended<span class="token punctuation">)</span>.<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:<span class="token function">npm</span> ERR<span class="token operator">!</span>     /Users/ado/.npm/_logs/2019-02-27T15_47_08_412Z-debug.log</code></pre><p>解决方法</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> /usr/local/lib/node_modules</code></pre><p>注意：包裹whoami的不是单引号,是斜绰号.</p><p>之后再安装hexo就能成功了.</p><p>参考：<a href="https://github.com/hexojs/hexo/issues/2785" target="_blank" rel="noopener">https://github.com/hexojs/hexo/issues/2785</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/02/28/hello-world/"/>
      <url>/2019/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView解决数据混乱,禁止复用</title>
      <link href="/2019/02/25/RecyclerView%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E6%B7%B7%E4%B9%B1-%E7%A6%81%E6%AD%A2%E5%A4%8D%E7%94%A8/"/>
      <url>/2019/02/25/RecyclerView%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E6%B7%B7%E4%B9%B1-%E7%A6%81%E6%AD%A2%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>因为RecyclerView自带ViewHoler，所以会自动复用Item。<br>有时候因为这个会产生一些条目数据错误。</p><h2 id="最简单的停止复用"><a href="#最简单的停止复用" class="headerlink" title="最简单的停止复用"></a>最简单的停止复用</h2><pre class=" language-java"><code class="language-java">recyclerView<span class="token punctuation">.</span><span class="token function">getRecycledViewPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaxRecycledViews</span><span class="token punctuation">(</span>viewType<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>setMaxRecycledViews(int viewType,int max);</p><p>viewType: 值必须和getItemViewType()的返回值保持一致。如果是多类型Item，选择不想用复用的item的值。<br>max:设置缓存池里最多持有几个ViewHolder,设置为0就不存在复用。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>如果这样设置后，列表条目增加，数据变大时，会造成性能下降，甚至是oom.<br>列表数据不多的场景可以这样做。<br>数据偏多的时候还是建议使用SparseArray缓存item的状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
